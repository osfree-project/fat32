_VENDOR=Netlabs
_VER=0.10
_VERSION=$(_VER).r$(%SVNREV)
FILEVER=@$#$(_VENDOR):$(_VERSION)$#@$#$#1$#$# $(%PROJSTR)::::0::@@

BINROOT  = $(ROOT)$(%SEP)bin
BLDROOT  = $(ROOT)$(%SEP)bld
LIBROOT  = $(BLDROOT)$(%SEP)lib
PROJ_BLD = $(BLDROOT)$(%SEP)$(PROJ)
BLDDIRS  = $(BINROOT) $(BLDROOT) $(LIBROOT) &
           $(BINROOT)$(%SEP)os2 $(BINROOT)$(%SEP)os2$(%SEP)boot $(BINROOT)$(%SEP)os2$(%SEP)dll &
           $(BINROOT)$(%SEP)os2$(%SEP)system $(BINROOT)$(%SEP)os2$(%SEP)system$(%SEP)trace &
           $(BINROOT)$(%SEP)os2$(%SEP)book $(BINROOT)$(%SEP)os2$(%SEP)docs $(BINROOT)$(%SEP)os2$(%SEP)docs$(%SEP)fat32 &
           $(BLDROOT)$(%SEP)util $(BLDROOT)$(%SEP)ifs $(BLDROOT)$(%SEP)ifs$(%SEP)libc $(BLDROOT)$(%SEP)partfilt &
           $(BLDROOT)$(%SEP)loop $(BLDROOT)$(%SEP)loop$(%SEP)libc $(BLDROOT)$(%SEP)ifsinf &
           $(BLDROOT)$(%SEP)ufat32 $(BLDROOT)$(%SEP)f32chk $(BLDROOT)$(%SEP)util$(%SEP)zlib $(BLDROOT)$(%SEP)util$(%SEP)emxdoc &
           $(BLDROOT)$(%SEP)util$(%SEP)qemu-img $(BLDROOT)$(%SEP)util$(%SEP)qemu-img$(%SEP)block &
           $(BLDROOT)$(%SEP)ufat32$(%SEP)win32 $(BINROOT)$(%SEP)win32 $(BINROOT)$(%SEP)win32$(%SEP)dll &
           $(BINROOT)$(%SEP)test $(BLDROOT)$(%SEP)test $(BLDROOT)$(%SEP)test$(%SEP)16bit

CLEANUP  = $(PROJ_BLD)$(%SEP)*.obj $(PROJ_BLD)$(%SEP)*.obd $(PROJ_BLD)$(%SEP)*.obc $(PROJ_BLD)$(%SEP)*.lnk $(PROJ_BLD)$(%SEP)*.wmp &
           $(PROJ_BLD)$(%SEP)*.map $(PROJ_BLD)$(%SEP)*.ols $(PROJ_BLD)$(%SEP)*.err $(BLDROOT)$(%SEP)..$(%SEP)include$(%SEP)ver.h &
           $(BLDROOT)$(%SEP)lib$(%SEP)*.lib $(BINROOT)$(%SEP)zip-*.flg $(BINROOT)$(%SEP)wpi.flg

# compress executables
!ifeq %OS os2
LXLITE   = 1
!else
LXLITE   = 0
!endif
# enable exFAT support (change it to 0 to get a build without exFAT)
EXFAT    = 1

mainifs  = &
 fat32.ifs

dll      = &
 qemuimg.dll &
 uunifat.dll &
 ufat32.dll &
 ufat12.dll &
 ufat16.dll &
!ifeq EXFAT 1
 uexfat.dll
!else
 #
!endif

util     = &
 cachef32.cmd &
 cachef32.exe &
 f32parts.exe &
 f32mon.exe   &
 f32stat.exe  &
 f32chk.exe &
 f32mount.exe &
 fat32chk.exe &
 fat32fmt.exe &
 fat32sys.exe &
 qemu-img.exe

inf      = &
 fat32.inf

ifsinf   = &
 ifs.inf

docs     = &
 build.txt message.txt notes.txt &
 deamon.txt fat32.txt lesser.txt &
 license.txt os2fat32.txt problems.txt &

korean   = &
 system$(%SEP)country.kor docs$(%SEP)fat32$(%SEP)fat32.kor

adddrv   = &
 os2dasd.f32 partfilt.flt

loopdrv  = &
 loop.add

sym      = &
 boot$(%SEP)fat32.sym system$(%SEP)trace$(%SEP)trc00fe.tff dll$(%SEP)uunifat.sym &
 cachef32.sym f32parts.sym f32mon.sym f32mount.sym &
 f32stat.sym f32chk.sym fat32chk.sym fat32fmt.sym fat32sys.sym &
 qemu-img.sym dll$(%SEP)qemuimg.sym

adddrvsym = &
 boot$(%SEP)partfilt.sym

loopsym  = &
 boot$(%SEP)loop.sym

adddrvdoc = &
 partfilt.doc partfilt.txt

fstab     = &
 fstab.cfg-sample

distlist = &
!ifeq ROOT . # don't include autogenerated files to this list if make is run from a non-root
 $(p)os2$(%SEP)boot$(%SEP)fat32.ifs &
 $(p)os2$(%SEP)boot$(%SEP)partfilt.flt &
 $(p)os2$(%SEP)boot$(%SEP)loop.add &
 $(p)os2$(%SEP)boot$(%SEP)fstab.cfg-sample &
 $(p)os2$(%SEP)dll$(%SEP)ufat32.dll &
 $(p)os2$(%SEP)dll$(%SEP)ufat12.dll &
 $(p)os2$(%SEP)dll$(%SEP)ufat16.dll &
 $(p)os2$(%SEP)dll$(%SEP)uunifat.dll &
!ifeq %OS os2
 $(p)os2$(%SEP)system$(%SEP)trace$(%SEP)trc00fe.tff &
 $(p)os2$(%SEP)boot$(%SEP)fat32.sym &
 $(p)os2$(%SEP)boot$(%SEP)partfilt.sym &
 $(p)os2$(%SEP)boot$(%SEP)loop.sym &
 $(p)os2$(%SEP)dll$(%SEP)uunifat.sym &
!endif
!ifeq EXFAT 1
 $(p)os2$(%SEP)dll$(%SEP)uexfat.dll &
!endif
 $(p)os2$(%SEP)dll$(%SEP)qemuimg.dll &
 $(p)os2$(%SEP)qemu-img.exe &
 $(p)os2$(%SEP)cachef32.exe &
 $(p)os2$(%SEP)f32parts.exe &
 $(p)os2$(%SEP)f32mon.exe  &
 $(p)os2$(%SEP)f32stat.exe &
 $(p)os2$(%SEP)f32chk.exe &
 $(p)os2$(%SEP)f32mount.exe &
 $(p)os2$(%SEP)fat32chk.exe &
 $(p)os2$(%SEP)fat32fmt.exe &
 $(p)os2$(%SEP)fat32sys.exe &
 $(p)os2$(%SEP)book$(%SEP)fat32.inf &
 $(p)os2$(%SEP)book$(%SEP)ifs.inf &
!ifeq %OS os2
 $(p)os2$(%SEP)dll$(%SEP)qemuimg.sym &
 $(p)os2$(%SEP)qemu-img.sym &
 $(p)os2$(%SEP)cachef32.sym &
 $(p)os2$(%SEP)f32parts.sym &
 $(p)os2$(%SEP)f32mon.sym &
 $(p)os2$(%SEP)f32stat.sym &
 $(p)os2$(%SEP)f32chk.sym &
 $(p)os2$(%SEP)f32mount.sym &
 $(p)os2$(%SEP)fat32chk.sym &
 $(p)os2$(%SEP)fat32fmt.sym &
 $(p)os2$(%SEP)fat32sys.sym &
!endif
!endif
 $(p)os2$(%SEP)docs$(%SEP)fat32$(%SEP)partfilt.doc $(p)os2$(%SEP)docs$(%SEP)fat32$(%SEP)build.txt $(p)os2$(%SEP)docs$(%SEP)fat32$(%SEP)notes.txt &
 $(p)os2$(%SEP)docs$(%SEP)fat32$(%SEP)deamon.txt $(p)os2$(%SEP)docs$(%SEP)fat32$(%SEP)fat32.txt $(p)os2$(%SEP)docs$(%SEP)fat32$(%SEP)lesser.txt &
 $(p)os2$(%SEP)docs$(%SEP)fat32$(%SEP)license.txt $(p)os2$(%SEP)docs$(%SEP)fat32$(%SEP)os2fat32.txt $(p)os2$(%SEP)docs$(%SEP)fat32$(%SEP)problems.txt &
 $(p)os2$(%SEP)docs$(%SEP)fat32$(%SEP)partfilt.txt $(p)os2$(%SEP)docs$(%SEP)fat32$(%SEP)message.txt &
 $(p)os2$(%SEP)system$(%SEP)country.kor $(p)os2$(%SEP)docs$(%SEP)fat32$(%SEP)fat32.kor &
 $(p)os2$(%SEP)boot$(%SEP)os2dasd.f32 $(p)os2$(%SEP)cachef32.cmd
p = $(BINROOT)$(%SEP)
distfiles = $+ $(distlist) $-
p =
dist = $+ $(distlist) $-

distlist2 = &
!ifeq ROOT . # don't include autogenerated files to this list if make is run from a non-root
 $(p)win32$(%SEP)dll$(%SEP)ufat32.dll &
 $(p)win32$(%SEP)fat32chk.exe &
 $(p)win32$(%SEP)fat32fmt.exe &
 $(p)win32$(%SEP)fat32sys.exe &
!ifeq %OS os2
 $(p)win32$(%SEP)dll$(%SEP)ufat32.sym &
 $(p)win32$(%SEP)fat32chk.sym &
 $(p)win32$(%SEP)fat32fmt.sym &
 $(p)win32$(%SEP)fat32sys.sym
!endif
!endif

p = $(BINROOT)$(%SEP)
distfiles2 = $+ $(distlist2) $-
p =
dist2 = $+ $(distlist2) $-

!ifneq EXFAT 1
suffix = -noexfat
!else
suffix = 
!endif

distname  = fat32-$(_VER)-r$(%SVNREV)$(suffix)
distfile1 = $(distname)-os2.zip
distfile2 = $(distname)-os2.wpi
distfile3 = $(distname)-win32.zip

AS=wasm
LNK=wlink op q
LIB=wlib -q
MAPCNV=$(ROOT)$(%SEP)mapsym.awk
IPFC=wipfc
WIC=wic

!ifdef _32BITS
CXX=wpp386
CC=wcc386
!else
CXX=wpp
CC=wcc
!endif

.SUFFIXES:
.SUFFIXES: .tff .tsf .add .flt .ifs .dll .exe .lib .lnk .ols .obc .obs .obd .obj .cpp .c .c16 .h .asm .sym .map .wmp .inf .ipf .bmp

all: $(BLDROOT)$(%SEP)bld.flg $(PROJ_BLD)$(%SEP)makefile.wcc dirs copy targets &
     $(BINROOT)$(%SEP)zip-os2.flg $(BINROOT)$(%SEP)zip-win32.flg &
!ifeq %OS os2
     $(BINROOT)$(%SEP)wpi.flg &
!endif
     .symbolic

targets: .symbolic
 @for %t in ($(TARGETS)) do @wmake -h -f makefile.wcc %t

$(PROJ_BLD)$(%SEP)makefile.wcc: makefile.wcc
 @echo !include $(PATH)$(%SEP)makefile.wcc >$^@

dirs: .symbolic
 @for %d in ($(DIRS)) do @cd %d && wmake -h -f makefile.wcc targets

$(BLDROOT)$(%SEP)bld.flg:
 @for %d in ($(BLDDIRS)) do @mkdir %d
 @wtouch $^@

$(BINROOT)$(%SEP)zip-os2.flg: $(distfiles)
 @echo ZIP      $(distfile1)
 @cd $(BINROOT)
 @echo "">zip-os2.flg
 @for %i in ($(dist)) do @zip -r $(distfile1) %i >>zip-os2.flg 2>&1
 @cd ..$(%SEP)$(PROJ)

$(BINROOT)$(%SEP)wpi.flg: $(distfiles)
 @echo WIC      $(distfile2)
 @cd $(BINROOT)
 @%create $(distname)-os2.pkg
 @%append $(distname)-os2.pkg $(distfile2) -a 1 -c.$(%SEP)os2$(%SEP)boot
 @for %file in ($(mainifs)) do @if exist os2$(%SEP)boot$(%SEP)%file @%append $(distname)-os2.pkg %file
 @%append $(distname)-os2.pkg 2 -c.$(%SEP)os2/dll
 @for %file in ($(dll)) do @if exist os2$(%SEP)dll$(%SEP)%file @%append $(distname)-os2.pkg %file
 @%append $(distname)-os2.pkg 3 -c.$(%SEP)os2
 @for %file in ($(util)) do @if exist os2$(%SEP)%file @%append $(distname)-os2.pkg %file
 @%append $(distname)-os2.pkg 4 -c.$(%SEP)os2$(%SEP)book
 @for %file in ($(inf)) do @if exist os2$(%SEP)book$(%SEP)%file @%append $(distname)-os2.pkg %file
 @%append $(distname)-os2.pkg 5 -c.$(%SEP)os2$(%SEP)docs$(%SEP)fat32
 @for %file in ($(docs)) do @if exist os2$(%SEP)docs$(%SEP)fat32$(%SEP)%file @%append $(distname)-os2.pkg %file
 @%append $(distname)-os2.pkg 6 -c.$(%SEP)os2
 @for %file in ($(korean)) do @if exist os2$(%SEP)%file @%append $(distname)-os2.pkg %file
 @%append $(distname)-os2.pkg 7 -c.$(%SEP)os2$(%SEP)boot
 @for %file in ($(adddrv)) do @if exist os2$(%SEP)boot$(%SEP)%file @%append $(distname)-os2.pkg %file
 @%append $(distname)-os2.pkg 8 -c.$(%SEP)os2$(%SEP)boot
 @for %file in ($(loopdrv)) do @if exist os2$(%SEP)boot$(%SEP)%file @%append $(distname)-os2.pkg %file
 @%append $(distname)-os2.pkg 9 -c.$(%SEP)os2
 @for %file in ($(sym)) do @if exist os2$(%SEP)%file @%append $(distname)-os2.pkg %file
 @%append $(distname)-os2.pkg 10 -c.$(%SEP)os2
 @for %file in ($(adddrvsym)) do @if exist os2$(%SEP)%file @%append $(distname)-os2.pkg %file
 @%append $(distname)-os2.pkg 11 -c.$(%SEP)os2
 @for %file in ($(loopsym)) do @if exist os2$(%SEP)%file @%append $(distname)-os2.pkg %file
 @%append $(distname)-os2.pkg 12 -c.$(%SEP)os2$(%SEP)docs$(%SEP)fat32
 @for %file in ($(adddrvdoc)) do @if exist os2$(%SEP)docs$(%SEP)fat32$(%SEP)%file @%append $(distname)-os2.pkg %file
 @%append $(distname)-os2.pkg 13 -c.$(%SEP)os2$(%SEP)book
 @for %file in ($(ifsinf)) do @if exist os2$(%SEP)book$(%SEP)%file @%append $(distname)-os2.pkg %file
 @%append $(distname)-os2.pkg 14 -c.$(%SEP)os2$(%SEP)boot
 @for %file in ($(fstab)) do @if exist os2$(%SEP)boot$(%SEP)%file @%append $(distname)-os2.pkg %file
 @%append $(distname)-os2.pkg -s ..$(%SEP)lib$(%SEP)fat32_010.wis
 @$(WIC) @$(distname)-os2.pkg >wpi.flg 2>&1
 @cd ..$(%SEP)$(PROJ)

$(BINROOT)$(%SEP)zip-win32.flg: $(distfiles2)
 @echo ZIP      $(distfile3)
 @cd $(BINROOT)
 @for %i in ($(dist2)) do @zip -r $(distfile3) %i >>zip-win32.flg 2>&1
 @cd ..$(%SEP)$(PROJ)

clean: .symbolic
 -@$(%RM) $(CLEANUP) >$(%NUL) 2>&1
 @for %d in ($(DIRS)) do @cd %d && @wmake -h -f makefile.wcc clean

copy: $(BINROOT)$(%SEP)os2$(%SEP)boot$(%SEP)os2dasd.f32 $(BINROOT)$(%SEP)os2$(%SEP)system$(%SEP)country.kor &
 $(BINROOT)$(%SEP)os2$(%SEP)docs$(%SEP)fat32$(%SEP)partfilt.doc $(BINROOT)$(%SEP)os2$(%SEP)docs$(%SEP)fat32$(%SEP)fat32.kor $(BINROOT)$(%SEP)os2$(%SEP)docs$(%SEP)fat32$(%SEP)build.txt &
 $(BINROOT)$(%SEP)os2$(%SEP)docs$(%SEP)fat32$(%SEP)deamon.txt $(BINROOT)$(%SEP)os2$(%SEP)docs$(%SEP)fat32$(%SEP)fat32.txt $(BINROOT)$(%SEP)os2$(%SEP)docs$(%SEP)fat32$(%SEP)lesser.txt &
 $(BINROOT)$(%SEP)os2$(%SEP)docs$(%SEP)fat32$(%SEP)license.txt $(BINROOT)$(%SEP)os2$(%SEP)docs$(%SEP)fat32$(%SEP)os2fat32.txt $(BINROOT)$(%SEP)os2$(%SEP)docs$(%SEP)fat32$(%SEP)problems.txt &
 $(BINROOT)$(%SEP)os2$(%SEP)docs$(%SEP)fat32$(%SEP)partfilt.txt $(BINROOT)$(%SEP)os2$(%SEP)docs$(%SEP)fat32$(%SEP)message.txt &
 $(BINROOT)$(%SEP)os2$(%SEP)docs$(%SEP)fat32$(%SEP)notes.txt $(BINROOT)$(%SEP)os2$(%SEP)cachef32.cmd .symbolic 

$(BINROOT)$(%SEP)os2$(%SEP)boot$(%SEP)os2dasd.f32: $(ROOT)$(%SEP)lib$(%SEP)os2dasd.f32
 @$(%CP) $< $^@ >$(%NUL) 2>&1

$(BINROOT)$(%SEP)os2$(%SEP)system$(%SEP)country.kor: $(ROOT)$(%SEP)lib$(%SEP)country.kor
 @$(%CP) $< $^@ >$(%NUL) 2>&1

$(BINROOT)$(%SEP)os2$(%SEP)docs$(%SEP)fat32$(%SEP)partfilt.doc: $(ROOT)$(%SEP)doc$(%SEP)partfilt.doc
 @$(%CP) $< $^@ >$(%NUL) 2>&1

$(BINROOT)$(%SEP)os2$(%SEP)docs$(%SEP)fat32$(%SEP)fat32.kor: $(ROOT)$(%SEP)doc$(%SEP)fat32.kor
 @$(%CP) $< $^@ >$(%NUL) 2>&1

$(BINROOT)$(%SEP)os2$(%SEP)docs$(%SEP)fat32$(%SEP)build.txt: $(ROOT)$(%SEP)doc$(%SEP)build.txt
 @$(%CP) $< $^@ >$(%NUL) 2>&1

$(BINROOT)$(%SEP)os2$(%SEP)docs$(%SEP)fat32$(%SEP)deamon.txt: $(ROOT)$(%SEP)doc$(%SEP)deamon.txt
 @$(%CP) $< $^@ >$(%NUL) 2>&1

$(BINROOT)$(%SEP)os2$(%SEP)docs$(%SEP)fat32$(%SEP)fat32.txt: $(ROOT)$(%SEP)doc$(%SEP)fat32.txt
 @$(%CP) $< $^@ >$(%NUL) 2>&1

$(BINROOT)$(%SEP)os2$(%SEP)docs$(%SEP)fat32$(%SEP)lesser.txt: $(ROOT)$(%SEP)doc$(%SEP)lesser.txt
 @$(%CP) $< $^@ >$(%NUL) 2>&1

$(BINROOT)$(%SEP)os2$(%SEP)docs$(%SEP)fat32$(%SEP)license.txt: $(ROOT)$(%SEP)doc$(%SEP)license.txt
 @$(%CP) $< $^@ >$(%NUL) 2>&1

$(BINROOT)$(%SEP)os2$(%SEP)docs$(%SEP)fat32$(%SEP)notes.txt: $(ROOT)$(%SEP)doc$(%SEP)notes.txt
 @$(%CP) $< $^@ >$(%NUL) 2>&1

$(BINROOT)$(%SEP)os2$(%SEP)docs$(%SEP)fat32$(%SEP)os2fat32.txt: $(ROOT)$(%SEP)doc$(%SEP)os2fat32.txt
 @$(%CP) $< $^@ >$(%NUL) 2>&1

$(BINROOT)$(%SEP)os2$(%SEP)docs$(%SEP)fat32$(%SEP)problems.txt: $(ROOT)$(%SEP)doc$(%SEP)problems.txt
 @$(%CP) $< $^@ >$(%NUL) 2>&1

$(BINROOT)$(%SEP)os2$(%SEP)docs$(%SEP)fat32$(%SEP)partfilt.txt: $(ROOT)$(%SEP)doc$(%SEP)partfilt.txt
 @$(%CP) $< $^@ >$(%NUL) 2>&1

$(BINROOT)$(%SEP)os2$(%SEP)docs$(%SEP)fat32$(%SEP)message.txt: $(ROOT)$(%SEP)doc$(%SEP)message.txt
 @$(%CP) $< $^@ >$(%NUL) 2>&1

$(BINROOT)$(%SEP)os2$(%SEP)cachef32.cmd: $(ROOT)$(%SEP)lib$(%SEP)cachef32.cmd
 @$(%CP) $< $^@ >$(%NUL) 2>&1

$(BINROOT)$(%SEP)os2$(%SEP)boot$(%SEP)fstab.cfg-sample: $(ROOT)$(%SEP)lib$(%SEP)fstab.cfg-sample
 @$(%CP) $< $^@ >$(%NUL) 2>&1

.inf: $(BINROOT)

.dll: $(BINROOT)

.exe: $(BINROOT)

.ifs: $(BINROOT)

.sym: $(BINROOT)

.lib: $(LIBROOT)

.obj: $(PROJ_BLD)

.obd: $(PROJ_BLD)

.lnk: $(PROJ_BLD)

.ols: $(PROJ_BLD)

.map: $(PROJ_BLD)

.wmp: $(PROJ_BLD)

.ipf: .

.bmp: .

.c: .

.c: ..

.asm: .

.asm: ..

.lnk.exe: .autodepend
 @echo LINK     $^.
 @$(LNK) @$<
!ifeq LXLITE 1
 @lxlite $@ 2>&1 >$(%NUL)
!endif

.lnk.dll: .autodepend
 @echo LINK     $^.
 @$(LNK) @$<
!ifeq LXLITE 1
 @lxlite $@ 2>&1 >$(%NUL)
!endif

.lnk.add: .autodepend
 @echo LINK     $^.
 @$(LNK) @$<
!ifeq LXLITE 1
 @lxlite $@ 2>&1 >$(%NUL)
!endif

.lnk.flt: .autodepend
 @echo LINK     $^.
 @$(LNK) @$<
!ifeq LXLITE 1
 @lxlite $@ 2>&1 >$(%NUL)
!endif

.lnk.ifs: .autodepend
 @echo LINK     $^.
 @$(LNK) @$[@
!ifeq LXLITE 1
 @lxlite $@ 2>&1 >$(%NUL)
!endif

.ols.lib: .autodepend
 @echo LIB      $^.
 @$(LIB) $^@ @$<

.asm.obj: .autodepend
 @echo AS       $^.
 @$(AS) $(AOPT) -fr=$^*.err -fo=$^@ $[@

.c.obj: .autodepend
 @echo CC       $^.
 @$(CC) $(COPT) -fr=$^*.err -fo=$^@ $<

.c.obd: .autodepend
 @echo CC       $^.
 @$(CC) $(COPT)  -d__DLL__ -bd -fr=$^*.err -fo=$^@ $<

.c.obc: .autodepend
 @echo CC       $^.
 @$(CC) $(COPT) -fr=$^*.err -fo=$^@ $<

.c.obs: .autodepend
 @echo CC       $^.
 @$(CC) $(COPT) -fr=$^*.err -fo=$^@ $<

.cpp.obj: .autodepend
 @echo CXX      $^.
 @$(CXX) $(COPT) -fr=$^*.err -fo=$^@ $[@

.ipf.inf: .autodepend
 @echo IPFC     $^.
 # @ipfc -i $< $(BINROOT)$^@ >$(%NUL) 2>&1
 @wipfc -i $< -o $^@ >$(%NUL) 2>&1

.wmp.map:
 @echo MAPCNV   $^.
 @awk -f $(MAPCNV) $< >$(PROJ_BLD)$(%SEP)$^.

.map.sym:
 @echo MAPSYM   $^.
 @mapsym $[@ >$(%NUL) 2>&1
 @$(%CP) $^. $^: >$(%NUL) 2>&1
 @$(%RM) $^. >$(%NUL) 2>&1
